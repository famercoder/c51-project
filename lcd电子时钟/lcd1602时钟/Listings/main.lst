C51 COMPILER V9.60.7.0   MAIN                                                              04/19/2023 16:07:58 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\users\inc) DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include "common.h"
   3          
   4          Environment gEnvironment;
   5          Environment gAlarmClockTime;
   6          bit gSettingTime = 0;
   7          bit gSettingDate = 0;
   8          bit gAlarmClockTimeUp = 0;
   9          uchar gLcd1602CurSettingRow = 0;
  10          uchar gLcd1602CurSettingCol = 0;
  11          uchar gLcd1602SettingTicket = 0;
  12          uchar gLedRunTicket = 0;
  13          uchar gLedRunTime = 0;
  14          uchar gSettingMode = eSetting_null;
  15          uchar gDispMode = eDisplayMode_dateTime;
  16          
  17          void init();
  18          void init_data();
  19          void run();
  20          void led_run();
  21          void timer0_init();
  22          void setDS1302Year();
  23          void setDS1302Mon();
  24          void setDS1302Day();
  25          void setDS1302Hour();
  26          void setDS1302Min();
  27          void setDS1302Sec();
  28          void setAlarmClockHour();
  29          void setAlarmClockMin();
  30          void setAlarmClockSec();
  31          void key1_action();
  32          void key2_action();
  33          void key3_action();
  34          void check_setting_mode();
  35          void check_alarm_clock();
  36          
  37          void main()
  38          {
  39   1          init();
  40   1          while(1)
  41   1          {
  42   2              while(!TF0);
  43   2              run();
  44   2          }
  45   1      }
  46          
  47          void init()
  48          {
  49   1          init_data();
  50   1          timer0_init();
  51   1          ds1302_init();
  52   1          lcd1602_init();
  53   1      
  54   1          key_register(0, key1_action);
C51 COMPILER V9.60.7.0   MAIN                                                              04/19/2023 16:07:58 PAGE 2   

  55   1          key_register(1, key2_action);
  56   1          key_register(2, key3_action);
  57   1      }
  58          
  59          void init_data()
  60          {
  61   1          gEnvironment.year = 23;
  62   1          gEnvironment.mon = 4;
  63   1          gEnvironment.day = 10;
  64   1          gEnvironment.hour = 22;
  65   1          gEnvironment.min = 40;
  66   1          gEnvironment.sec = 50;
  67   1          gEnvironment.temperature[0] = 25;
  68   1          gEnvironment.temperature[1] = 0;
  69   1          gEnvironment.humidity[0] = 65;
  70   1          gEnvironment.humidity[1] = 0;
  71   1      
  72   1          gAlarmClockTime.hour = 13;
  73   1          gAlarmClockTime.min = 25;
  74   1          gAlarmClockTime.sec = 30;
  75   1      }
  76          
  77          void led_run()
  78          {
  79   1          if (gAlarmClockTimeUp)
  80   1          {
  81   2              gLedRunTime++;
  82   2              gLedRunTicket++;
  83   2      
  84   2              if (gLedRunTicket == 100) //500ms
  85   2              {
  86   3                  gLedRunTicket = 0;
  87   3                  LED_RUN = ~LED_RUN;
  88   3              }
  89   2      
  90   2              if (gLedRunTime == 1200)
  91   2              {
  92   3                  gAlarmClockTimeUp = 0;
  93   3                  gLedRunTime = 0;
  94   3                  gLedRunTicket = 0;
  95   3              }
  96   2          }
  97   1      }
  98          
  99          void run()
 100          {
 101   1          key_run();
 102   1          led_run();
 103   1          check_setting_mode();
 104   1          check_alarm_clock();
 105   1      
 106   1          if (gSettingMode == eSetting_null)
 107   1          {
 108   2              gLcd1602SettingTicket = 0;
 109   2              ds1302_read_time(&gEnvironment);
 110   2              dht11_read_dat(&gEnvironment);
 111   2      
 112   2              if (gDispMode == eDisplayMode_alarm_clock) 
 113   2                  lcd1602_display(gDispMode, gAlarmClockTime);
 114   2              else 
 115   2                  lcd1602_display(gDispMode, gEnvironment);
 116   2          }
C51 COMPILER V9.60.7.0   MAIN                                                              04/19/2023 16:07:58 PAGE 3   

 117   1          else
 118   1          {
 119   2              gLcd1602SettingTicket++;
 120   2              if (gLcd1602SettingTicket < 50) 
 121   2              {
 122   3                  if (gDispMode == eDisplayMode_alarm_clock)
 123   3                      lcd1602_display_setting(gAlarmClockTime, gSettingMode);
 124   3                  else
 125   3                      lcd1602_display_setting(gEnvironment, gSettingMode);
 126   3              }   
 127   2              else if (gLcd1602SettingTicket >= 50 && gLcd1602SettingTicket < 100) 
 128   2              {
 129   3                  if (gDispMode == eDisplayMode_alarm_clock) 
 130   3                      lcd1602_display(gDispMode, gAlarmClockTime);
 131   3                  else 
 132   3                      lcd1602_display(gDispMode, gEnvironment);
 133   3                  }
 134   2              else
 135   2                  gLcd1602SettingTicket = 0;
 136   2          }
 137   1      }
 138          
 139          void timer0_init()
 140          {
 141   1          TMOD = 0x01;
 142   1          TH0 = (65536 - 5000) / 256;
 143   1          TL0 = (65536 - 5000) % 256;
 144   1          TF0 = 0;
 145   1          TR0 = 1;
 146   1          ET0 = 1;
 147   1          EA = 1;
 148   1      }
 149          
 150          void timer0() interrupt 1
 151          {
 152   1          TH0 = (65536 - 5000) / 256;
 153   1          TL0 = (65536 - 5000) % 256;
 154   1      }
 155          
 156          void setDS1302Year()
 157          {
 158   1          gSettingDate = 1;
 159   1          gEnvironment.year++;
 160   1      
 161   1          if (gEnvironment.year > 99) 
 162   1              gEnvironment.year = 0;
 163   1      }
 164          
 165          void setDS1302Mon()
 166          {
 167   1          gSettingDate = 1;
 168   1          gEnvironment.mon++;
 169   1      
 170   1          if (gEnvironment.mon > 12)
 171   1              gEnvironment.mon = 1;
 172   1      }
 173          
 174          void setDS1302Day()
 175          {
 176   1          gSettingDate = 1;
 177   1          gEnvironment.day++;
 178   1      
C51 COMPILER V9.60.7.0   MAIN                                                              04/19/2023 16:07:58 PAGE 4   

 179   1          if (gEnvironment.day > 31)
 180   1              gEnvironment.day = 1;
 181   1      }
 182          
 183          void setDS1302Hour()
 184          {
 185   1          gSettingTime = 1;
 186   1          gEnvironment.hour++;
 187   1      
 188   1          if (gEnvironment.hour > 23)
 189   1              gEnvironment.hour = 0;
 190   1      }
 191          
 192          void setDS1302Min()
 193          {
 194   1          gSettingTime = 1;
 195   1          gEnvironment.min++;
 196   1      
 197   1          if (gEnvironment.min > 59)
 198   1              gEnvironment.min = 0;
 199   1      }
 200          
 201          void setDS1302Sec()
 202          {
 203   1          gSettingTime = 1;
 204   1          gEnvironment.sec++;
 205   1      
 206   1          if (gEnvironment.sec > 59)
 207   1              gEnvironment.sec = 0;
 208   1      }
 209          
 210          void setAlarmClockHour()
 211          {
 212   1          gAlarmClockTime.hour++;
 213   1          if (gAlarmClockTime.hour > 23)
 214   1              gAlarmClockTime.hour = 0;
 215   1      }
 216          
 217          void setAlarmClockMin()
 218          {
 219   1          gAlarmClockTime.min++;
 220   1          if (gAlarmClockTime.min > 59)
 221   1              gAlarmClockTime.min = 0;
 222   1      }
 223          
 224          void setAlarmClockSec()
 225          {
 226   1          gAlarmClockTime.sec++;
 227   1          if (gAlarmClockTime.sec > 59)
 228   1              gAlarmClockTime.sec = 0;
 229   1      }
 230          
 231          void key1_action()
 232          {
 233   1          switch (gDispMode)
 234   1          {
 235   2              case eDisplayMode_dateTime:
 236   2              {
 237   3                  gLcd1602CurSettingCol++;
 238   3                  if (gLcd1602CurSettingCol > 3)
 239   3                  {
 240   4                      gLcd1602CurSettingCol = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              04/19/2023 16:07:58 PAGE 5   

 241   4                      gLcd1602CurSettingRow++;
 242   4      
 243   4                      if (gLcd1602CurSettingRow > 1)
 244   4                          gLcd1602CurSettingRow = 0;
 245   4                  } 
 246   3      
 247   3                  break;       
 248   3              }
 249   2              case eDisplayMode_alarm_clock:
 250   2              {
 251   3                  gLcd1602CurSettingRow = 1;
 252   3                  gLcd1602CurSettingCol++;
 253   3      
 254   3                  if (gLcd1602CurSettingCol > 3)
 255   3                      gLcd1602CurSettingCol = 1;
 256   3      
 257   3                  break;
 258   3              }
 259   2          }
 260   1      }
 261          
 262          void key2_action()
 263          {
 264   1          switch (gDispMode)
 265   1          {
 266   2              case eDisplayMode_dateTime: 
 267   2              {
 268   3                  if (gLcd1602CurSettingRow == 0 && gLcd1602CurSettingCol == 1) setDS1302Year();
 269   3                  if (gLcd1602CurSettingRow == 0 && gLcd1602CurSettingCol == 2) setDS1302Mon(); 
 270   3                  if (gLcd1602CurSettingRow == 0 && gLcd1602CurSettingCol == 3) setDS1302Day();
 271   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 1) setDS1302Hour();
 272   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 2) setDS1302Min();
 273   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 3) setDS1302Sec();   
 274   3                  return;
 275   3              }
 276   2              case eDisplayMode_alarm_clock: 
 277   2              {
 278   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 1) setAlarmClockHour();
 279   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 2) setAlarmClockMin();
 280   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 3) setAlarmClockSec();
 281   3                  return; 
 282   3              } 
 283   2          }
 284   1      }
 285          
 286          void key3_action()
 287          {
 288   1          gDispMode++;
 289   1          if (gDispMode >= eDisplayMode_max) 
 290   1              gDispMode = eDisplayMode_dateTime;
 291   1      
 292   1          if (gDispMode == eDisplayMode_tpHumi)
 293   1          {
 294   2              if (gSettingTime)
 295   2              {
 296   3                  ds1302_set_time(eDs1302_Set_hms, &gEnvironment);
 297   3                  gSettingTime = 0;
 298   3              }
 299   2      
 300   2              if (gSettingDate)
 301   2              {
 302   3                  ds1302_set_time(eDs1302_Set_ymd, &gEnvironment);
C51 COMPILER V9.60.7.0   MAIN                                                              04/19/2023 16:07:58 PAGE 6   

 303   3                  gSettingDate = 0;
 304   3              }
 305   2          }
 306   1      
 307   1          gLcd1602CurSettingRow = 0;
 308   1          gLcd1602CurSettingCol = 0;
 309   1      }
 310          
 311          void check_setting_mode()
 312          {
 313   1          gSettingMode = eSetting_null;
 314   1          switch (gDispMode) 
 315   1          {
 316   2              case eDisplayMode_dateTime:
 317   2              {
 318   3                  if (gLcd1602CurSettingRow == 0 && gLcd1602CurSettingCol == 1) gSettingMode = eSetting_year;
 319   3                  if (gLcd1602CurSettingRow == 0 && gLcd1602CurSettingCol == 2) gSettingMode = eSetting_mon; 
 320   3                  if (gLcd1602CurSettingRow == 0 && gLcd1602CurSettingCol == 3) gSettingMode = eSetting_day;
 321   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 1) gSettingMode = eSetting_hour;
 322   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 2) gSettingMode = eSetting_min;
 323   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 3) gSettingMode = eSetting_sec;
 324   3                  return;
 325   3              }
 326   2              case eDisplayMode_alarm_clock:
 327   2              {
 328   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 1) gSettingMode = eSetting_hour;
 329   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 2) gSettingMode = eSetting_min;
 330   3                  if (gLcd1602CurSettingRow == 1 && gLcd1602CurSettingCol == 3) gSettingMode = eSetting_sec;
 331   3                  return; 
 332   3              }       
 333   2          }
 334   1      }
 335          
 336          void check_alarm_clock()
 337          {
 338   1          if (gEnvironment.hour == gAlarmClockTime.hour && 
 339   1          gEnvironment.min == gAlarmClockTime.min && 
 340   1          gEnvironment.sec == gAlarmClockTime.sec)
 341   1          {
 342   2              gAlarmClockTimeUp = 1;
 343   2              gLedRunTicket = 0;
 344   2              gLedRunTime = 0;
 345   2          }
 346   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    827    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
