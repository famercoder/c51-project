C51 COMPILER V9.60.7.0   LCD1602                                                           04/14/2023 18:39:06 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN .\Objects\lcd1602.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE users\src\lcd1602.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\users\inc) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\lcd1602.lst) TABS(2) OBJECT(.\Objects\lcd1602.obj)

line level    source

   1          #include "common.h"
   2          
   3          void lcd1602_init()
   4          {
   5   1          LCD1602_RW = 0;
   6   1          LCD1602_E = 0;
   7   1      
   8   1          lcd1602_write4bits(0x33, LCD1602_WRITE_COMMAND);
   9   1          lcd1602_write4bits(0x32, LCD1602_WRITE_COMMAND);
  10   1          lcd1602_write4bits(0x28, LCD1602_WRITE_COMMAND);
  11   1          lcd1602_write4bits(0x0c, LCD1602_WRITE_COMMAND);
  12   1          lcd1602_write4bits(0x06, LCD1602_WRITE_COMMAND);
  13   1          lcd1602_clear();
  14   1      
  15   1          lcd1602_message("Welcome to --->\n  SunFounder");
  16   1          delay_ms(3000);
  17   1      
  18   1          lcd1602_clear(); 
  19   1      }
  20          
  21          void lcd1602_write4bits(uchar bits, bit mode)
  22          {
  23   1          while(lcd1602_busy());
  24   1          LCD1602_RS = mode;
  25   1          _nop_();
  26   1      
  27   1          P0 &= 0x0f; 
  28   1          P0 |= (bits & 0xf0);
  29   1          lcd1602_pulseenable();
  30   1      
  31   1          P0 &= 0x0f;
  32   1          P0 |= (bits << 4) & 0xf0;
  33   1          lcd1602_pulseenable();
  34   1      }
  35          
  36          void lcd1602_setcursor(uchar row, uchar col)
  37          {
  38   1          uchar offsets[] = {0x00, 0x40, 0x14, 0x54};
  39   1          lcd1602_write4bits(0x80 | (col + offsets[row]), LCD1602_WRITE_COMMAND);
  40   1      }
  41          
  42          void lcd1602_message(char* message)
  43          {
  44   1          char* p = message;
  45   1          while(*p != '\0')
  46   1          {
  47   2              if (*p == '\n') lcd1602_write4bits(0xc0, LCD1602_WRITE_COMMAND);
  48   2              else            lcd1602_write4bits(*p, LCD1602_WRITE_DATA);
  49   2              p++;
  50   2          }
  51   1      }
  52          
  53          void lcd1602_clear()
  54          {
C51 COMPILER V9.60.7.0   LCD1602                                                           04/14/2023 18:39:06 PAGE 2   

  55   1          lcd1602_write4bits(0x01, LCD1602_WRITE_COMMAND);
  56   1          delay_ms(5);
  57   1      }
  58          
  59          void lcd1602_pulseenable()
  60          {
  61   1          LCD1602_E = 0;
  62   1          _nop_();
  63   1          LCD1602_E = 1;
  64   1          _nop_();
  65   1          _nop_();
  66   1          LCD1602_E = 0;
  67   1          _nop_();
  68   1          _nop_();
  69   1      }
  70          
  71          bit  lcd1602_busy()
  72          {
  73   1        bit result = 0;
  74   1      //  LCD1602_RS = 0;
  75   1      //  LCD1602_RW = 1;
  76   1      //  LCD1602_E = 1;
  77   1      //  _nop_();
  78   1      //  _nop_();
  79   1      //  _nop_();
  80   1      //  _nop_();
  81   1      //  result = (bit)(P0 & 0x80);   
  82   1      //  LCD1602_E = 0;
  83   1      //  LCD1602_RW = 0;
  84   1          return result;
  85   1      }
  86          
  87          void lcd1602_display_time(uchar row, uchar col, Environment information)
  88          {
  89   1          uchar displayValues[6] = {0};
  90   1          displayValues[0] = information.hour / 10;
  91   1          displayValues[1] = information.hour % 10;
  92   1          displayValues[2] = information.min / 10;
  93   1          displayValues[3] = information.min % 10;
  94   1          displayValues[4] = information.sec / 10;
  95   1          displayValues[5] = information.sec % 10;
  96   1      
  97   1          if (information.hour == 255) 
  98   1          {
  99   2              lcd1602_format_display(row, col, displayValues, "Time:nn:xx:xx", 14);
 100   2              return;
 101   2          }
 102   1      
 103   1          if (information.min == 255) 
 104   1          {
 105   2              lcd1602_format_display(row, col, displayValues, "Time:xx:nn:xx", 14);
 106   2              return;
 107   2          }
 108   1      
 109   1          if (information.sec == 255) 
 110   1          {
 111   2              lcd1602_format_display(row, col, displayValues, "Time:xx:xx:nn", 14);
 112   2              return;
 113   2          }
 114   1      
 115   1          lcd1602_format_display(row, col, displayValues, "Time:xx:xx:xx", 14);
 116   1      }
C51 COMPILER V9.60.7.0   LCD1602                                                           04/14/2023 18:39:06 PAGE 3   

 117          
 118          void lcd1602_display_date(uchar row, uchar col, Environment information)
 119          {
 120   1          uchar displayValues[6] = {0};
 121   1          displayValues[0] = information.year / 10;
 122   1          displayValues[1] = information.year % 10;
 123   1          displayValues[2] = information.mon / 10;
 124   1          displayValues[3] = information.mon % 10;
 125   1          displayValues[4] = information.day / 10;
 126   1          displayValues[5] = information.day % 10;
 127   1      
 128   1          if (information.year == 255)
 129   1          {
 130   2              lcd1602_format_display(row, col, displayValues, "Date:nn/xx/xx", 14); 
 131   2              return;
 132   2          }
 133   1      
 134   1          if (information.mon == 255)
 135   1          {
 136   2              lcd1602_format_display(row, col, displayValues, "Date:xx/nn/xx", 14); 
 137   2              return;
 138   2          }
 139   1      
 140   1          if (information.day == 255)
 141   1          {
 142   2              lcd1602_format_display(row, col, displayValues, "Date:xx/xx/nn", 14); 
 143   2              return;
 144   2          }
 145   1      
 146   1          lcd1602_format_display(row, col, displayValues, "Date:xx/xx/xx", 14); 
 147   1      }
 148          
 149          void lcd1602_display_temperature(uchar row, uchar col, Environment information)
 150          {
 151   1          uchar displayValues[4] = {0};
 152   1          displayValues[0] = information.temperature[0] / 10;
 153   1          displayValues[1] = information.temperature[0] % 10;
 154   1          displayValues[2] = information.temperature[1] / 10;
 155   1          displayValues[3] = information.temperature[1] % 10;
 156   1          lcd1602_format_display(row, col, displayValues, "Temp:xx.xx C", 13); 
 157   1      }
 158          
 159          void lcd1602_display_humidity(uchar row, uchar col, Environment information)
 160          {
 161   1          uchar displayValues[4] = {0};
 162   1          displayValues[0] = information.humidity[0] / 10;
 163   1          displayValues[1] = information.humidity[0] % 10;
 164   1          displayValues[2] = information.humidity[1] / 10;
 165   1          displayValues[3] = information.humidity[1] % 10;
 166   1          lcd1602_format_display(row, col, displayValues, "Humi:xx.xx %", 13);
 167   1      }
 168          
 169          void lcd1602_display(enum DisplayMode dispMode, Environment information)
 170          {
 171   1          static enum DisplayMode lastDispMode = eDisplayMode_dateTime;
 172   1          if (lastDispMode != dispMode)
 173   1          {
 174   2              lcd1602_clear();
 175   2              delay_ms(300);
 176   2          }
 177   1      
 178   1          lastDispMode = dispMode;
C51 COMPILER V9.60.7.0   LCD1602                                                           04/14/2023 18:39:06 PAGE 4   

 179   1          switch (dispMode)
 180   1          {
 181   2              case eDisplayMode_dateTime:
 182   2              {
 183   3                  lcd1602_display_date(0, 0, information);
 184   3                  lcd1602_display_time(1, 0, information);
 185   3                  break;
 186   3              }
 187   2              case eDisplayMode_tpHumi:
 188   2              {
 189   3                  lcd1602_display_temperature(0, 0, information);
 190   3                  lcd1602_display_humidity(1, 0, information);
 191   3                  break;
 192   3              }
 193   2              default:
 194   2              {
 195   3                  lcd1602_clear();
 196   3                  lcd1602_message("Error --->\n  SunFounder");
 197   3                  break;
 198   3              }
 199   2          }
 200   1      }
 201          
 202          void lcd1602_display_setting(Environment information, enum SettingMode settingMode)
 203          {
 204   1          switch (settingMode)
 205   1          {
 206   2              case eSetting_year: information.year = 255; break;
 207   2              case eSetting_mon:  information.mon = 255;  break;
 208   2              case eSetting_day:  information.day = 255;  break;  
 209   2              case eSetting_hour: information.hour = 255; break;   
 210   2              case eSetting_min:  information.min = 255;  break;
 211   2              case eSetting_sec:  information.sec = 255;  break;
 212   2          }
 213   1      
 214   1          if (settingMode == eSetting_year || settingMode == eSetting_mon || settingMode == eSetting_day)
 215   1          {
 216   2              lcd1602_display_date(0, 0, information);
 217   2              return;
 218   2          }
 219   1      
 220   1          if (settingMode == eSetting_hour || settingMode == eSetting_min || settingMode == eSetting_sec)
 221   1          {
 222   2              lcd1602_display_time(1, 0, information);
 223   2              return;
 224   2          }     
 225   1      }
 226          
 227          void lcd1602_format_display(uchar row, uchar col, uchar displayValues[], char message[], uchar messageLen)
 228          {
 229   1          uchar i = 0, pos = 0;
 230   1          for (i = 0; i < messageLen; i++)
 231   1          {
 232   2              if (message[i] == 'x')
 233   2              {
 234   3                  message[i] = displayValues[pos]+'0';
 235   3                  pos++;
 236   3              }
 237   2              else if (message[i] == 'n')
 238   2              {
 239   3                  message[i] = ' ';
 240   3              }
C51 COMPILER V9.60.7.0   LCD1602                                                           04/14/2023 18:39:06 PAGE 5   

 241   2          }
 242   1      
 243   1          lcd1602_setcursor(row, col);
 244   1          lcd1602_message(message);     
 245   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1069    ----
   CONSTANT SIZE    =    215    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1     109
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
