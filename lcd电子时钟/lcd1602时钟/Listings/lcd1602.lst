C51 COMPILER V9.60.7.0   LCD1602                                                           04/13/2023 21:04:50 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN .\Objects\lcd1602.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE users\src\lcd1602.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\users\inc) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\lcd1602.lst) TABS(2) OBJECT(.\Objects\lcd1602.obj)

line level    source

   1          #include "common.h"
   2          
   3          uchar gOpenGB = 0;
   4          
   5          void lcd1602_init()
   6          {
   7   1          LCD1602_RW = 0;
   8   1          LCD1602_E = 0;
   9   1      
  10   1          lcd1602_write4bits(0x33, LCD1602_WRITE_COMMAND);
  11   1          lcd1602_write4bits(0x32, LCD1602_WRITE_COMMAND);
  12   1          lcd1602_write4bits(0x28, LCD1602_WRITE_COMMAND);
  13   1          lcd1602_write4bits(0x0c, LCD1602_WRITE_COMMAND);
  14   1          lcd1602_write4bits(0x06, LCD1602_WRITE_COMMAND);
  15   1          lcd1602_clear();
  16   1      
  17   1          lcd1602_message("Welcome to --->\n  SunFounder");
  18   1          delay_ms(3000);
  19   1      
  20   1          lcd1602_clear(); 
  21   1      }
  22          
  23          void lcd1602_write4bits(uchar bits, bit mode)
  24          {
  25   1          while(lcd1602_busy());
  26   1          LCD1602_RS = mode;
  27   1          _nop_();
  28   1      
  29   1          P0 &= 0x0f; 
  30   1          P0 |= (bits & 0xf0);
  31   1          lcd1602_pulseenable();
  32   1      
  33   1          P0 &= 0x0f;
  34   1          P0 |= (bits << 4) & 0xf0;
  35   1          lcd1602_pulseenable();
  36   1      }
  37          
  38          void lcd1602_setcursor(uchar row, uchar col)
  39          {
  40   1          uchar offsets[] = {0x00, 0x40, 0x14, 0x54};
  41   1          lcd1602_write4bits(0x80 | (col + offsets[row]), LCD1602_WRITE_COMMAND);
  42   1      }
  43          
  44          void lcd1602_message(char* message)
  45          {
  46   1          char* p = message;
  47   1          while(*p != '\0')
  48   1          {
  49   2              if (*p == '\n') 
  50   2                  lcd1602_write4bits(0xc0, LCD1602_WRITE_COMMAND);
  51   2              else 
  52   2                  lcd1602_write4bits(*p, LCD1602_WRITE_DATA);
  53   2              p++;
  54   2          }
C51 COMPILER V9.60.7.0   LCD1602                                                           04/13/2023 21:04:50 PAGE 2   

  55   1      }
  56          
  57          void lcd1602_clear()
  58          {
  59   1          lcd1602_write4bits(0x01, LCD1602_WRITE_COMMAND);
  60   1          delay_ms(5);
  61   1      }
  62          
  63          void lcd1602_pulseenable()
  64          {
  65   1          LCD1602_E = 0;
  66   1          _nop_();
  67   1          LCD1602_E = 1;
  68   1          _nop_();
  69   1          _nop_();
  70   1          LCD1602_E = 0;
  71   1          _nop_();
  72   1          _nop_();
  73   1      }
  74          
  75          bit  lcd1602_busy()
  76          {
  77   1        bit result = 0;
  78   1      //  LCD1602_RS = 0;
  79   1      //  LCD1602_RW = 1;
  80   1      //  LCD1602_E = 1;
  81   1      //  _nop_();
  82   1      //  _nop_();
  83   1      //  _nop_();
  84   1      //  _nop_();
  85   1      //  result = (bit)(P0 & 0x80);   
  86   1      //  LCD1602_E = 0;
  87   1      //  LCD1602_RW = 0;
  88   1          return result;
  89   1      }
  90          
  91          void lcd1602_display_time(uchar row, uchar col, Environment* information)
  92          {
  93   1          char message[] = "Time:xx:xx:xx";
  94   1          uchar i = 0, pos = 0;
  95   1          uchar displayValues[6] = {0};
  96   1      
  97   1          displayValues[0] = information->hour / 10;
  98   1          displayValues[1] = information->hour % 10;
  99   1          displayValues[2] = information->min / 10;
 100   1          displayValues[3] = information->min % 10;
 101   1          displayValues[4] = information->sec / 10;
 102   1          displayValues[5] = information->sec % 10;
 103   1      
 104   1          for (i = 0; i < sizeof(message) / sizeof(char); i++)
 105   1          {
 106   2              if (message[i] == 'x')
 107   2              {
 108   3                  message[i] = displayValues[pos]+'0';
 109   3                  pos++;
 110   3              }
 111   2          }
 112   1      
 113   1          lcd1602_setcursor(row, col);
 114   1          lcd1602_message(message);
 115   1      }
 116          
C51 COMPILER V9.60.7.0   LCD1602                                                           04/13/2023 21:04:50 PAGE 3   

 117          void lcd1602_display_date(uchar row, uchar col, Environment* information)
 118          {
 119   1          char message[] = "Date:xx/xx/xx";
 120   1          uchar i = 0, pos = 0;
 121   1          uchar displayValues[6] = {0};
 122   1      
 123   1          displayValues[0] = information->year / 10;
 124   1          displayValues[1] = information->year % 10;
 125   1          displayValues[2] = information->mon / 10;
 126   1          displayValues[3] = information->mon % 10;
 127   1          displayValues[4] = information->day / 10;
 128   1          displayValues[5] = information->day % 10;
 129   1      
 130   1          for (i = 0; i < sizeof(message) / sizeof(char); i++)
 131   1          {
 132   2              if (message[i] == 'x')
 133   2              {
 134   3                  message[i] = displayValues[pos]+'0';
 135   3                  pos++;
 136   3              }
 137   2          }
 138   1      
 139   1          lcd1602_setcursor(row, col);
 140   1          lcd1602_message(message);  
 141   1      }
 142          
 143          void lcd1602_display_temperature(uchar row, uchar col, Environment* information)
 144          {
 145   1          char message[] = "Temp:xx.xx C";
 146   1          uchar i = 0, pos = 0;
 147   1          uchar displayValues[4] = {0};
 148   1      
 149   1          displayValues[0] = information->temperature[0] / 10;
 150   1          displayValues[1] = information->temperature[0] % 10;
 151   1          displayValues[2] = information->temperature[1] / 10;
 152   1          displayValues[3] = information->temperature[1] % 10;
 153   1      
 154   1          for (i = 0; i < sizeof(message) / sizeof(char); i++)
 155   1          {
 156   2              if (message[i] == 'x')
 157   2              {
 158   3                  message[i] = displayValues[pos]+'0';
 159   3                  pos++;
 160   3              }
 161   2          }
 162   1      
 163   1          lcd1602_setcursor(row, col);
 164   1          lcd1602_message(message);  
 165   1      }
 166          
 167          void lcd1602_display_humidity(uchar row, uchar col, Environment* information)
 168          {
 169   1          char message[] = "Humi:xx.xx %";
 170   1          uchar i = 0, pos = 0;
 171   1          uchar displayValues[4] = {0};
 172   1      
 173   1          displayValues[0] = information->humidity[0] / 10;
 174   1          displayValues[1] = information->humidity[0] % 10;
 175   1          displayValues[2] = information->humidity[1] / 10;
 176   1          displayValues[3] = information->humidity[1] % 10;
 177   1      
 178   1          for (i = 0; i < sizeof(message) / sizeof(char); i++)
C51 COMPILER V9.60.7.0   LCD1602                                                           04/13/2023 21:04:50 PAGE 4   

 179   1          {
 180   2              if (message[i] == 'x')
 181   2              {
 182   3                  message[i] = displayValues[pos]+'0';
 183   3                  pos++;
 184   3              }
 185   2          }
 186   1      
 187   1          lcd1602_setcursor(row, col);
 188   1          lcd1602_message(message);  
 189   1      }
 190          
 191          void lcd1602_display(enum DisplayMode dispMode, Environment* information)
 192          {
 193   1          static enum DisplayMode lastDispMode = eDisplayMode_dateTime;
 194   1          
 195   1          if (gOpenGB)
 196   1              return;
 197   1      
 198   1          if (lastDispMode != dispMode)
 199   1          {
 200   2              lcd1602_clear();
 201   2              delay_ms(500);
 202   2          }
 203   1      
 204   1          lastDispMode = dispMode;
 205   1          switch (dispMode)
 206   1          {
 207   2              case eDisplayMode_dateTime:
 208   2              {
 209   3                  lcd1602_display_time(1, 0, information);
 210   3                  lcd1602_display_date(0, 0, information);
 211   3                  break;
 212   3              }
 213   2              case eDisplayMode_tpHumi:
 214   2              {
 215   3                  lcd1602_display_temperature(0, 0, information);
 216   3                  lcd1602_display_humidity(1, 0, information);
 217   3                  break;
 218   3              }
 219   2              default:
 220   2              {
 221   3                  lcd1602_clear();
 222   3                  lcd1602_message("Error --->\n  SunFounder");
 223   3                  break;
 224   3              }
 225   2          }
 226   1      }
 227          
 228          void lcd1602_open_gb(uchar row, uchar col)
 229          {
 230   1          lcd1602_setcursor(row, col);
 231   1          lcd1602_write4bits(0x0f, LCD1602_WRITE_COMMAND); //开启光标
 232   1          gOpenGB = 1;
 233   1      }
 234          
 235          void lcd1602_close_gb()
 236          {
 237   1          lcd1602_write4bits(0x0c, LCD1602_WRITE_COMMAND); //关闭光标
 238   1          gOpenGB = 0;
 239   1      }
 240          
C51 COMPILER V9.60.7.0   LCD1602                                                           04/13/2023 21:04:50 PAGE 5   

 241          void lcd1602_display_char(uchar row, uchar col, uchar dispChar)
 242          {
 243   1          if (row) _nop_();
 244   1          if (col) _nop_();
 245   1          lcd1602_write4bits(dispChar+'0', LCD1602_WRITE_DATA);
 246   1          lcd1602_write4bits(0x0c, LCD1602_WRITE_COMMAND); //关闭光标
 247   1          lcd1602_setcursor(row, col);
 248   1          lcd1602_write4bits(0x0f, LCD1602_WRITE_COMMAND); //开启光标
 249   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1001    ----
   CONSTANT SIZE    =    131    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2     114
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
