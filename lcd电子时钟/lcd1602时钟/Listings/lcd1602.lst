C51 COMPILER V9.60.7.0   LCD1602                                                           04/12/2023 20:53:15 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN .\Objects\lcd1602.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE users\src\lcd1602.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\users\inc) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\lcd1602.lst) TABS(2) OBJECT(.\Objects\lcd1602.obj)

line level    source

   1          #include "common.h"
   2          
   3          void lcd1602_init()
   4          {
   5   1          LCD1602_RW = 0;
   6   1          LCD1602_E = 0;
   7   1      
   8   1          lcd1602_write4bits(0x33, LCD1602_WRITE_COMMAND);
   9   1          lcd1602_write4bits(0x32, LCD1602_WRITE_COMMAND);
  10   1          lcd1602_write4bits(0x28, LCD1602_WRITE_COMMAND);
  11   1          lcd1602_write4bits(0x0c, LCD1602_WRITE_COMMAND);
  12   1          lcd1602_write4bits(0x06, LCD1602_WRITE_COMMAND);
  13   1          lcd1602_clear();
  14   1      
  15   1          lcd1602_message("Welcome to --->\n  SunFounder");
  16   1          delay_ms(3000);
  17   1          lcd1602_clear(); 
  18   1      }
  19          
  20          void lcd1602_write4bits(uchar bits, bit mode)
  21          {
  22   1          while(lcd1602_busy());
  23   1          LCD1602_RS = mode;
  24   1          _nop_();
  25   1      
  26   1          P0 &= 0x0f; 
  27   1          P0 |= (bits & 0xf0);
  28   1          lcd1602_pulseenable();
  29   1      
  30   1          P0 &= 0x0f;
  31   1          P0 |= (bits << 4) & 0xf0;
  32   1          lcd1602_pulseenable();
  33   1      }
  34          
  35          void lcd1602_setcursor(uchar row, uchar col)
  36          {
  37   1          uchar offsets[] = {0x00, 0x40, 0x14, 0x54};
  38   1          lcd1602_write4bits(0x80 | (col + offsets[row]), LCD1602_WRITE_COMMAND);
  39   1      }
  40          
  41          void lcd1602_message(char* message)
  42          {
  43   1          char* p = message;
  44   1          while(*p != '\0')
  45   1          {
  46   2              if (*p == '\n') 
  47   2                  lcd1602_write4bits(0xc0, LCD1602_WRITE_COMMAND);
  48   2              else 
  49   2                  lcd1602_write4bits(*p, LCD1602_WRITE_DATA);
  50   2              p++;
  51   2          }
  52   1      }
  53          
  54          void lcd1602_clear()
C51 COMPILER V9.60.7.0   LCD1602                                                           04/12/2023 20:53:15 PAGE 2   

  55          {
  56   1          lcd1602_write4bits(0x01, LCD1602_WRITE_COMMAND);
  57   1          delay_ms(5);
  58   1      }
  59          
  60          void lcd1602_pulseenable()
  61          {
  62   1          LCD1602_E = 0;
  63   1          _nop_();
  64   1          LCD1602_E = 1;
  65   1          _nop_();
  66   1          _nop_();
  67   1          LCD1602_E = 0;
  68   1          _nop_();
  69   1          _nop_();
  70   1      }
  71          
  72          bit  lcd1602_busy()
  73          {
  74   1        bit result = 0;
  75   1      //  LCD1602_RS = 0;
  76   1      //  LCD1602_RW = 1;
  77   1      //  LCD1602_E = 1;
  78   1      //  _nop_();
  79   1      //  _nop_();
  80   1      //  _nop_();
  81   1      //  _nop_();
  82   1      //  result = (bit)(P0 & 0x80);   
  83   1      //  LCD1602_E = 0;
  84   1      //  LCD1602_RW = 0;
  85   1          return result;
  86   1      }
  87          
  88          void lcd1602_display_time(uchar row, uchar col, Environment* information)
  89          {
  90   1          char message[] = "Time:xx:xx:xx";
  91   1          uchar i = 0, pos = 0;
  92   1          uchar displayValues[6] = {0};
  93   1      
  94   1          displayValues[0] = information->hour / 10;
  95   1          displayValues[1] = information->hour % 10;
  96   1          displayValues[2] = information->min / 10;
  97   1          displayValues[3] = information->min % 10;
  98   1          displayValues[4] = information->sec / 10;
  99   1          displayValues[5] = information->sec % 10;
 100   1      
 101   1          for (i = 0; i < sizeof(message) / sizeof(char); i++)
 102   1          {
 103   2              if (message[i] == 'x')
 104   2              {
 105   3                  message[i] = displayValues[pos]+'0';
 106   3                  pos++;
 107   3              }
 108   2          }
 109   1      
 110   1          lcd1602_setcursor(row, col);
 111   1          lcd1602_message(message);
 112   1      }
 113          
 114          void lcd1602_display_date(uchar row, uchar col, Environment* information)
 115          {
 116   1          char message[] = "Date:20xx-xx-xx";
C51 COMPILER V9.60.7.0   LCD1602                                                           04/12/2023 20:53:15 PAGE 3   

 117   1          uchar i = 0, pos = 0;
 118   1          uchar displayValues[6] = {0};
 119   1      
 120   1          displayValues[0] = information->year / 10;
 121   1          displayValues[1] = information->year % 10;
 122   1          displayValues[2] = information->mon / 10;
 123   1          displayValues[3] = information->mon % 10;
 124   1          displayValues[4] = information->day / 10;
 125   1          displayValues[5] = information->day % 10;
 126   1      
 127   1          for (i = 0; i < sizeof(message) / sizeof(char); i++)
 128   1          {
 129   2              if (message[i] == 'x')
 130   2              {
 131   3                  message[i] = displayValues[pos]+'0';
 132   3                  pos++;
 133   3              }
 134   2          }
 135   1      
 136   1          lcd1602_setcursor(row, col);
 137   1          lcd1602_message(message);  
 138   1      }
 139          
 140          void lcd1602_display_temperature(uchar row, uchar col, Environment* information)
 141          {
 142   1          char message[] = "Temp:xx.xx C";
 143   1          uchar i = 0, pos = 0;
 144   1          uchar displayValues[4] = {0};
 145   1      
 146   1          displayValues[0] = information->temperature[0] / 10;
 147   1          displayValues[1] = information->temperature[0] % 10;
 148   1          displayValues[2] = information->temperature[1] / 10;
 149   1          displayValues[3] = information->temperature[1] % 10;
 150   1      
 151   1          for (i = 0; i < sizeof(message) / sizeof(char); i++)
 152   1          {
 153   2              if (message[i] == 'x')
 154   2              {
 155   3                  message[i] = displayValues[pos]+'0';
 156   3                  pos++;
 157   3              }
 158   2          }
 159   1      
 160   1          lcd1602_setcursor(row, col);
 161   1          lcd1602_message(message);  
 162   1      }
 163          
 164          void lcd1602_display_humidity(uchar row, uchar col, Environment* information)
 165          {
 166   1          char message[] = "Humi:xx.xx %";
 167   1          uchar i = 0, pos = 0;
 168   1          uchar displayValues[4] = {0};
 169   1      
 170   1          displayValues[0] = information->humidity[0] / 10;
 171   1          displayValues[1] = information->humidity[0] % 10;
 172   1          displayValues[2] = information->humidity[1] / 10;
 173   1          displayValues[3] = information->humidity[1] % 10;
 174   1      
 175   1          for (i = 0; i < sizeof(message) / sizeof(char); i++)
 176   1          {
 177   2              if (message[i] == 'x')
 178   2              {
C51 COMPILER V9.60.7.0   LCD1602                                                           04/12/2023 20:53:15 PAGE 4   

 179   3                  message[i] = displayValues[pos]+'0';
 180   3                  pos++;
 181   3              }
 182   2          }
 183   1      
 184   1          lcd1602_setcursor(row, col);
 185   1          lcd1602_message(message);  
 186   1      }
 187          
 188          void lcd1602_display(enum DisplayMode dispMode, Environment* information)
 189          {
 190   1          static enum DisplayMode lastDispMode = eDisplayMode_time_date;
 191   1          if (lastDispMode != dispMode)
 192   1          {
 193   2              lcd1602_clear();
 194   2              delay_ms(500);
 195   2          }
 196   1      
 197   1          lastDispMode = dispMode;
 198   1          switch (dispMode)
 199   1          {
 200   2              case eDisplayMode_time_date:
 201   2              {
 202   3                  lcd1602_display_time(0, 0, information);
 203   3                  lcd1602_display_date(1, 0, information);
 204   3                  break;
 205   3              }
 206   2              case eDisplayMode_tphumi:
 207   2              {
 208   3                  lcd1602_display_temperature(0, 0, information);
 209   3                  lcd1602_display_humidity(1, 0, information);
 210   3                  break;
 211   3              }
 212   2              default:
 213   2              {
 214   3                  lcd1602_clear();
 215   3                  lcd1602_message("Error --->\n  SunFounder");
 216   3                  break;
 217   3              }
 218   2          }
 219   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    936    ----
   CONSTANT SIZE    =    133    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1     114
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
